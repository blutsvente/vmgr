#!/tools/apps/ruby/bin/ruby.2.1.5 -w
#
# Ruby Vmgr (Vmanager) library
#
# Reads a .vsif file and create a vms_run testlist.
# See USAGE.
# ---
# Author: Thorsten Dworzak <tlemail69-github@yahoo.com>
# ---
#
require 'getoptlong'
require 'find'
require_relative '../lib/vmgr/collaterals.rb'
require_relative '../lib/vmgr/container.rb'
require_relative '../lib/vmgr/testcontainer.rb'
require_relative '../lib/vmgr/groupcontainer.rb'
require_relative '../lib/vmgr/sessioncontainer.rb'
require_relative '../lib/vmgr/session.rb'
require_relative '../lib/vmgr/vmstestlist.rb'

#
# Globals
#

$USAGE="Usage:
#{$0} [<options>] <vsif-file>

This script reads a .vsif file and creates a flat testlist for vms_run.

<options>:
--help, -h:
   print usage
--out, -o:
   name of output file (extension .tl will be added if not supplied)
--debug, -d:
   debug, creates intermediate files

Example:
> #{$0} main.vsif -o main

"

#
# Module definition
#
module Vmgr

    ME = File.basename(__FILE__, ".rb")

    #
    # Main part of module
    # ---
    # Parse options
    @vsif_file = ""
    @vsif_dir = "."
    @tl_out = ""
    @debug = false
    opts = GetoptLong.new( [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
                        [ '--out' , '-o', GetoptLong::OPTIONAL_ARGUMENT],
                        [ '--debug', '-d', GetoptLong::OPTIONAL_ARGUMENT]
                        )
    opts.each { | opt, arg |
      case opt
      when '--help'
          puts $USAGE
          exit 0
      when '--out'
          @tl_out = File.dirname(arg) + "/" + File.basename(arg, ".tl") + ".tl"
      when '--debug'
          @debug = true
      end
    }

    if ARGV.size != 1 then
      STDERR.puts "#{ME} [ERROR]: must supply one .vsif file as input"
      STDERR.puts $USAGE
      exit 1
    else
      @vsif_dir = File.dirname(ARGV[0])
      @vsif_file = File.basename(ARGV[0], ".vsif") + ".vsif"
    end

    if @tl_out.empty?
      @tl_out = File.basename(@vsif_file, ".vsif") + ".tl"
    end

    save_dir = Dir.getwd()
    Dir.chdir(@vsif_dir)

    # Create a blank session and populate it with .vsif
    @session = Session.new("vms_run testlist; automatically generated by script: #{ME} from file: #{@vsif_file}");
    if @session.read_vsif(@vsif_file) then
      @session.write_vsif("_parsed.vsif") if @debug
      if nil != @session.session_container then
        flat_session_container = @session.session_container.flatten_groups("flat")
        # replace old session container with flat one
        @session.session_container = flat_session_container
        @session.write_vsif("_flattened.vsif") if @debug;
        @session.write_tl(@tl_out);
      else
        STDERR.puts "#{ME} [WARNING]: nothing to be done\n"
      end
    else
      STDERR.puts "#{ME} [ERROR]: error reading " + @vsif_file
      exit 1
    end

    Dir.chdir(save_dir)
end
