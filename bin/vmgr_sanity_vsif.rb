#!/tools/apps/ruby/bin/ruby.2.1.5 -w
#
# Ruby Vmgr (Vmanager) library
#
# Reads a .vsif file and creates a reduced sanity .vsif file.
# See USAGE.
# ---
# Author: Thorsten Dworzak <tlemail69-github@yahoo.com>
# ---
#
require 'getoptlong'
require 'find'
require_relative '../lib/vmgr/collaterals.rb'
require_relative '../lib/vmgr/container.rb'
require_relative '../lib/vmgr/testcontainer.rb'
require_relative '../lib/vmgr/groupcontainer.rb'
require_relative '../lib/vmgr/sessioncontainer.rb'
require_relative '../lib/vmgr/session.rb'

#
# Globals
#

$USAGE="Usage:
#{$0} [<options>] <vsif-file>

This script reads a .vsif file and creates a reduced sanity .vsif file with all tests
running once with seed 1 (default). Tests with count 0 will be omitted.
The script will detect the attributes 'sanity_seed' and 'sanity_count' in the test container
that can be used to override the default seed+count values.

<options>:
--help, -h:
   print usage
--out, -o:
   name of output file (extension .vsif not required)

Example:
> #{$0} main.vsif -o sanity

"

#
# Module definition
#
module Vmgr

    ME = File.basename(__FILE__, ".rb")
    @debug = false

    # Entry function to populate a new sanity session and override the old session container
    def Vmgr.make_sanity()
      # create new session container that will be populated from the parsed session container
      if nil != @session.session_container then
        sanity = SessionContainer.new(@session.session_container.name + "_sanity", "Sanity regression; automatically generated by script #{ME} from #{@vsif_file}", :vsif)
        Vmgr.make_sanity_core(@session.session_container, sanity)

        # overwrite old session container
        @session.session_container = sanity
        return true
      else
        STDERR.puts "#{ME} [WARNING]: nothing to be done"
        return false
      end
    end

    # Recursive function to populate to_container from from_container
    def Vmgr.make_sanity_core(from_container, to_container)
      from_container.hattribs.each {|key, value|
          case key
          when "sanity_count", "sanity_seed"    # do not show in output .vsif
            next
          when "groups"
            value.each { |it|
                puts "group #{it.name}" if @debug
                new_group = GroupContainer.new(it.name)
                Vmgr.make_sanity_core(it, new_group)

                Vmgr.override_count_attribute(it, new_group)
                Vmgr.override_seed_attribute(it, new_group)

                if (new_group.has_attribute("groups") and !new_group.groups.empty?) or (new_group.has_attribute("tests") and !new_group.tests.empty?) then
                  to_container.add_group(new_group)
                else
                  STDERR.puts  "#{ME} [WARNING]: skipping group #{it.name} that contains neither groups nor tests"
                end
            }
          when "tests"
            value.each { |it|
                puts "test #{it.name}" if @debug
                new_test = TestContainer.new(it.name)
                Vmgr.make_sanity_core(it, new_test)

                next if (0 == Vmgr.override_count_attribute(it, new_test))

                Vmgr.override_seed_attribute(it, new_test)
                to_container.add_test(new_test)
            }
          else
            # replace count+seed from session + group containers
            skip = false
            if from_container.ctype != :test and ["count", "seed", "sv_seed"].include?(key) then
                skip = true
            end
            # add default count/seed to group and session
            if from_container.ctype == :group or from_container.ctype == :session then
                seed = from_container.has_attribute("sanity_seed") ? from_container.sanity_seed : 1;
                to_container.add_attribute("seed", seed)
                count = from_container.has_attribute("sanity_count") ? from_container.sanity_count : 1;
                to_container.add_attribute("count", count)
            end

            to_container.add_attribute(key, value) if !skip
          end
      }
    end

    def Vmgr.override_count_attribute(from_container, new_container)
      begin
        # override 'count' attribute
        count = 1
        if from_container.has_attribute("sanity_count") then
          count = Integer(from_container.sanity_count.strip || ''); # avoid throwing TypeEerror for nil
          new_container.add_attribute("count", count)
        else
          count = Integer(from_container.count.strip || '') if from_container.has_attribute("count")
          new_container.delete_attribute("count")
        end
        if count == 0 then
          puts "#{ME} [INFO]: skipping #{from_container.ctype} #{from_container.name} with count 0"
        end
      rescue ArgumentError
        abort("#{ME} [ERROR]: could not convert value to integer; in context = #{from_container.ctype} #{from_container.name}")
      end
      return count
    end

    def Vmgr.override_seed_attribute(from_container, new_container)
      # override 'seed' attribute
      seed = 1;
      if from_container.has_attribute("sanity_seed") then
        seed = from_container.sanity_seed
        new_container.add_attribute("seed", seed)
      else
        new_container.delete_attribute("seed")
      end
      return seed
    end

    #
    # Main part of module
    # ---
    # Parse options
    @vsif_file = ""
    @vsif_dir = "."
    @vsif_out = "sanity.vsif"
    opts = GetoptLong.new( [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
                        [ '--out' , '-o', GetoptLong::OPTIONAL_ARGUMENT]
                        )
    opts.each { | opt, arg |
      case opt
      when '--help'
          puts $USAGE
          exit 0
      when '--out'
          @vsif_out = File.dirname(arg) + "/" + File.basename(arg, ".vsif") + ".vsif"
      end
    }

    if ARGV.size != 1 then
      abort("#{ME} [ERROR]: must supply one vsif file as input\n#{$USAGE}")
    else
      @vsif_dir = File.dirname(ARGV[0])
      @vsif_file = File.basename(ARGV[0], ".vsif") + ".vsif"
    end

    save_dir = Dir.getwd()
    Dir.chdir(@vsif_dir)

    # Read .vsif and create new .vsif
    @session = Session.new("");
    if @session.read_vsif(@vsif_file) then
      if Vmgr.make_sanity() then
        @session.write_vsif(@vsif_out);
      end
    end

    Dir.chdir(save_dir)
end
